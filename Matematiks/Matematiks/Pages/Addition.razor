@page "/"
@page "/addition"

@inject ISessionService _sessionService;

<PageTitle>Addition</PageTitle>

<h1 class="display-1"> @left + @right</h1>

<h1 class="display-1" style="height:100px;"> @result</h1>

@* <button class="btn btn-primary" @onclick="Generate">Next</button> *@

<br />
<div class="btn-group-vertical ml-4 mt-4 container" role="group" aria-label="Basic example">

    <div class="btn-group">
        <button type="button" class="btn btn-outline-primary py-3" @onclick="_ => Input(1)">1</button>
        <button type="button" class="btn btn-outline-primary py-3" @onclick="_ => Input(2)">2</button>
        <button type="button" class="btn btn-outline-primary py-3" @onclick="_ => Input(3)">3</button>
    </div>
    <div class="btn-group">
        <button type="button" class="btn btn-outline-primary py-3" @onclick="_ => Input(4)">4</button>
        <button type="button" class="btn btn-outline-primary py-3" @onclick="_ => Input(5)">5</button>
        <button type="button" class="btn btn-outline-primary py-3" @onclick="_ => Input(6)">6</button>
    </div>
    <div class="btn-group">
        <button type="button" class="btn btn-outline-primary py-3" @onclick="_ => Input(7)">7</button>
        <button type="button" class="btn btn-outline-primary py-3" @onclick="_ => Input(8)">8</button>
        <button type="button" class="btn btn-outline-primary py-3" @onclick="_ => Input(9)">9</button>
    </div>
    <div class="btn-group">
        <button type="button" class="btn btn-outline-primary py-3" @onclick="Delete">&lt;</button>
        <button type="button" class="btn btn-outline-primary py-3" @onclick="_ => Input(0)">0</button>
    </div>
</div>

<p> @correctCounter | @deleteCounter </p>

<style>
    .btn-group > button {
        height:150px;
        font-size: 50px;
    }
</style>

@code {
    private int left = 0;

    private int right = 0;

    private string result = string.Empty;

    private int correctCounter = 0;
    private int deleteCounter = 0;

    private Session session = new();

    private void Generate()
    {
        left = Random.Shared.Next(1, 19);

        right = Random.Shared.Next(1, 20 - left);

        result = string.Empty;
    }

    private void Input(int number)
    {
        if (result.Count() >= 2)
        {
            return;
        }

        result += number;

        if (int.TryParse(result, out var intResult))
        {
            if (intResult == left + right)
            {
                correctCounter++;

                session.CorrectCounter = correctCounter;

                SaveState();
                Generate();
            }
        }
    }

    private void Delete()
    {
        if (string.IsNullOrWhiteSpace(result))
        {
            return;
        }

        result = result[..^1];
        deleteCounter++;

        session.DeleteCounter = deleteCounter;
        SaveState();
    }

    protected override Task OnInitializedAsync()
    {
        Generate();

        return base.OnInitializedAsync();
    }

    private void SaveState()
    {
        session.LastActionTime = DateTime.Now;
        _sessionService.SaveSession(session);
    }  
}
